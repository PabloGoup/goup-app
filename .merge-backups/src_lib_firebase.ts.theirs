
// src/lib/firebase.ts
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import {
  getAuth,
  GoogleAuthProvider,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut as firebaseSignOut,
  onAuthStateChanged,
  type User as FirebaseUser,
} from "firebase/auth";
import { getFirestore } from "firebase/firestore";

const firebaseConfig = {
    apiKey: "AIzaSyDBiInvXywL0IrCgQsiEiYxXTfBMliUoFo",
    authDomain: "goupevents-infra-non-prod-s23.firebaseapp.com",
    projectId: "goupevents-infra-non-prod-s23",
    storageBucket: "goupevents-infra-non-prod-s23.firebasestorage.app",
    messagingSenderId: "931565577824",
    appId: "1:931565577824:web:e602132b96358460538505",
    measurementId: "G-7YTJNEZ0KW"
};

export type Club = {
  id?: string;
  nombre: string;
  nombre_insensitive: string;
  direccion?: string | null;
  ciudad?: string | null;
  pais?: string | null;
  latitud?: number | null;
  longitud?: number | null;
  imagen?: string | null;
  banner?: string | null;
  accesibilidad?: boolean;
  estacionamientos?: boolean;
  guardaropia?: boolean;
  terraza?: boolean;
  fumadores?: boolean;
  wifi?: boolean;
  ambientes?: number | null;
  banos?: number | null;
  seguidores?: number;
  seguridad?: boolean;
  createdAt?: string;
};

export type EventDoc = {
  id?: string;
  uid_creador: string;
  nombre: string;
  descripcion: string;
  fechaInicio: string; // o Firebase Timestamp si usas server
  fechaFin: string;
  clubId: string;
  venderTickets: boolean;
  estado: "draft" | "publicado" | "archivado";
  moneda: "CLP" | "USD";
  perUserLimit?: number | null;
  ventaAbre?: string | null;
  ventaCierra?: string | null;
  createdAt?: string;
};

export type TicketType = {
  id?: string;
  name: string;
  price: number;
  stockTotal: number;
  stockDisponible: number;
  perUserLimit?: number | null;
  orden: number;
  activo: boolean;
};

export type Order = {
  id?: string;
  userId: string;
  eventId: string;
  status: "pending" | "paid" | "expired" | "refunded";
  items: { ticketTypeId: string; name: string; unitPrice: number; qty: number; lineTotal: number }[];
  amountSubtotal: number;
  amountFees: number;
  amountTotal: number;
  currency: "CLP" | "USD";
  stripePaymentIntentId?: string | null;
  createdAt?: any;
  paidAt?: any;
};

export type Ticket = {
  id?: string;
  orderId: string;
  eventId: string;
  ticketTypeId: string;
  userId: string;
  qr: string;
  status: "valid" | "used" | "refunded";
  createdAt?: any;
};
const app = initializeApp(firebaseConfig);

// Analytics (solo en cliente)
let analytics: ReturnType<typeof getAnalytics> | null = null;
if (typeof window !== "undefined") {
  try {
    analytics = getAnalytics(app);
  } catch {
    // ignorar si no est치 disponible
  }
}

// Auth
export const auth = getAuth(app);
export const provider = new GoogleAuthProvider();

/**
 * Suscribe un callback a los cambios de usuario.
 * Devuelve la funci칩n de unsubscribe.
 */
export function onUserChanged(
  callback: (user: FirebaseUser | null) => void
): () => void {
  return onAuthStateChanged(auth, callback);
}

/** Iniciar sesi칩n con email/password */
export function signIn(email: string, password: string) {
  return signInWithEmailAndPassword(auth, email, password);
}

/** Registrar un usuario con email/password */
export function registerWithEmail(email: string, password: string) {
  return createUserWithEmailAndPassword(auth, email, password);
}

/** Cerrar sesi칩n */
export function signOut() {
  return firebaseSignOut(auth);
}

// Firestore
export const db = getFirestore(app);